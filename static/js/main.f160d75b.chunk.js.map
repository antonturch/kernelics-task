{"version":3,"sources":["features/Todolists/Todolist.module.css","Components/AddItemForm.module.css","features/Tasks/Task.module.css","Components/headerNavlinkButtons/HeaderNavlinkButtons.module.css","Components/EditableSpan.module.css","Components/AddTodolistPage.module.css","Components/AddItemForm.tsx","redux/reducers/todolist-reducer.ts","redux/reducers/task-reducer.ts","features/Tasks/Task.tsx","Components/EditableSpan.tsx","features/Todolists/Todolist.tsx","features/Todolists/TodolistsList.tsx","Components/AddTodolistPage.tsx","Components/headerNavlinkButtons/HeaderNavlinkButtons.tsx","app/App.tsx","reportWebVitals.ts","redux/store.ts","index.tsx"],"names":["module","exports","AddItemForm","React","memo","addItemHandler","type","useState","inputValue","setInputValue","error","setError","className","style","add_task_form","task_input","input","placeholder","value","onChange","event","newInputValue","currentTarget","onKeyPress","charCode","trim","autoFocus","error_message","task_add_button","onClick","viewBox","d","CHANGE_FILTER_VALUE","v1","DELETE_TODOLIST","ADD_TODOLIST","CHANGE_TODOLIST_TITLE","initTodolistsState","CHANGE_TASK_STATUS","DELETE_TASK","ADD_TASK","CHANGE_TASK_TITLE","initTasksState","Task","task","deleteTask","setNewTaskTitle","changeTaskStatus","changeTaskStatusHandler","taskId","styles","task_list","checked","status","title","task_strike","task_item_remove","EditableSpan","setNewItemHandler","editMode","setEditMode","itemTitle","setItemTitle","input_todolist","onBlur","todolist_title","onDoubleClick","Todolist","todolist","tasks","useSelector","state","id","dispatch","useDispatch","addNewTask","useCallback","todolistId","newTaskTitle","changeTodolistFilter","newFilterValue","filterValue","deleteTodolist","changeTodolistTitle","newTodolistTitle","changeTodolistTitleAC","changeTaskTitleAC","changeTaskStatusAC","deleteTaskAC","textAlign","Tooltip","IconButton","aria-label","size","fontSize","task_controls","filter","btn_active","tasksAfterFilter","el","map","filtrationTasks","TodolistsList","todolists","Grid","container","spacing","justifyContent","tdl","item","maxWidth","AddTodolistPage","addTodolist","todolistTitle","addTodolistAC","add_todolist_block","HeaderNavlinkButtons","activePage","setActivePage","page_controls","to","App","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","changedState","newTodolist","newTask","copyState","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f160d75b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"todolist\":\"Todolist_todolist__2hW8m\",\"buttonGroup\":\"Todolist_buttonGroup__1MgBv\",\"tasksLi\":\"Todolist_tasksLi__DhAXc\",\"task_controls\":\"Todolist_task_controls__2rMYb\",\"btn_active\":\"Todolist_btn_active__3FKQQ\",\"task_list\":\"Todolist_task_list__37ulM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"AddItemForm_input__2Fxmd\",\"task_add_button\":\"AddItemForm_task_add_button__1N3EZ\",\"add_task_form\":\"AddItemForm_add_task_form__2iBzI\",\"task_input\":\"AddItemForm_task_input__3W5-g\",\"error_message\":\"AddItemForm_error_message__36NVD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"task_list\":\"Task_task_list__2qYw1\",\"task_item_remove\":\"Task_task_item_remove__23zcV\",\"task_strike\":\"Task_task_strike__T35Q6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"page_controls\":\"HeaderNavlinkButtons_page_controls__3rht8\",\"btn_active\":\"HeaderNavlinkButtons_btn_active__zce2n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input_todolist\":\"EditableSpan_input_todolist__3YwVf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"add_todolist_block\":\"AddTodolistPage_add_todolist_block__3RzT5\"};","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport style from \"./AddItemForm.module.css\"\r\n\r\ntype AddItemFormPropsType = {\r\n    addItemHandler: (inputValue: string) => void\r\n    type: string\r\n}\r\n\r\nexport const AddItemForm: React.FC<AddItemFormPropsType> = React.memo(({addItemHandler, type}) => {\r\n\r\n    const [inputValue, setInputValue] = useState<string>(\"\")\r\n    const [error, setError] = useState<string>(\"\")\r\n\r\n    const onChangeInputHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setError(\"\")\r\n        const newInputValue = event.currentTarget.value\r\n        setInputValue(newInputValue)\r\n    }\r\n\r\n    const onClickButtonHandler = () => {\r\n        if (inputValue.trim() !== \"\") {\r\n            addItemHandler(inputValue)\r\n            setInputValue(\"\")\r\n        } else {\r\n            setError(`Please enter ${type} title`)\r\n        }\r\n    }\r\n    const onPressEnterHandler = (event: KeyboardEvent<HTMLDivElement>) => {\r\n        if (event.charCode === 13 && inputValue.trim() !== \"\") {\r\n            addItemHandler(inputValue)\r\n            setInputValue(\"\")\r\n        } else\r\n            setError(`Please enter ${type} title`)\r\n    }\r\n\r\n    return (\r\n        <div className={style.add_task_form}>\r\n            <div className={style.task_input}>\r\n                <input className={style.input}\r\n                       type={\"text\"}\r\n                       placeholder={`New ${type}`}\r\n                       value={inputValue}\r\n                       onChange={onChangeInputHandler}\r\n                       onKeyPress={onPressEnterHandler}\r\n                       autoFocus/>\r\n                <div className={style.error_message}>{error}</div>\r\n            </div>\r\n            <button className={style.task_add_button} onClick={onClickButtonHandler}>\r\n                <svg viewBox=\"0 0 40 40\">\r\n                    <path d=\"M10 20 L30 20 M20 10 L20 30\"/>\r\n                </svg>\r\n            </button>\r\n        </div>\r\n    )\r\n})","import {v1} from \"uuid\";\r\n\r\nexport const TODOLIST_ID1 = v1()\r\nexport const TODOLIST_ID2 = v1()\r\nconst CHANGE_FILTER_VALUE = \"CHANGE-FILTER-VALUE\" as const\r\nexport const DELETE_TODOLIST = \"DELETE-TODOLIST\" as const\r\nexport const ADD_TODOLIST = \"ADD-TODOLIST\" as const\r\nconst CHANGE_TODOLIST_TITLE = \"CHANGE-TODOLIST-TITLE\" as const\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValueType\r\n}\r\nexport type FilterValueType = \"all\" | \"active\" | \"completed\"\r\ntype ActionsType = ReturnType<typeof deleteTodolistAC>\r\n    | ReturnType<typeof changeFilterValueAC>\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n\r\n\r\nexport const changeFilterValueAC = (todolistId: string,\r\n                                    filterValue: FilterValueType) => ({\r\n    type: CHANGE_FILTER_VALUE,\r\n    todolistId,\r\n    filterValue,\r\n})\r\nexport const deleteTodolistAC = (todolistId: string) => ({\r\n    type: DELETE_TODOLIST,\r\n    todolistId,\r\n})\r\nexport const addTodolistAC = (todolistId: string, todolistTitle: string) => ({\r\n    type: ADD_TODOLIST,\r\n    todolistId,\r\n    todolistTitle,\r\n})\r\nexport const changeTodolistTitleAC = (todolistId: string, newTodolistTitle: string) => ({\r\n    type: CHANGE_TODOLIST_TITLE,\r\n    todolistId,\r\n    newTodolistTitle,\r\n})\r\n\r\nconst initTodolistsState: TodolistType[] = [\r\n    // {id: TODOLIST_ID1, title: \"First todolist\", filter: \"all\",},\r\n    // {id: TODOLIST_ID2, title: \"Second todolist\", filter: \"all\",},\r\n]\r\n\r\nexport const todolistReducer = (state = initTodolistsState, action: ActionsType): TodolistType[] => {\r\n    switch (action.type) {\r\n        case CHANGE_FILTER_VALUE:\r\n            const changedState = state.map(\r\n                tdl => tdl.id === action.todolistId ? {...tdl, filter: action.filterValue} : tdl)\r\n            return changedState\r\n        case DELETE_TODOLIST:\r\n            return state.filter(tdl => tdl.id !== action.todolistId)\r\n        case ADD_TODOLIST:\r\n            const newTodolist: TodolistType = {\r\n                id: action.todolistId,\r\n                title: action.todolistTitle,\r\n                filter: \"all\"\r\n            }\r\n            return [newTodolist, ...state]\r\n        case CHANGE_TODOLIST_TITLE:\r\n            return state.map(\r\n                tdl => tdl.id === action.todolistId ? {...tdl, title: action.newTodolistTitle} : tdl)\r\n        default:\r\n            return state\r\n    }\r\n}","import {v1} from \"uuid\";\r\nimport {ADD_TODOLIST, addTodolistAC, DELETE_TODOLIST, deleteTodolistAC} from \"./todolist-reducer\";\r\n\r\nconst CHANGE_TASK_STATUS = \"CHANGE-TASK-STATUS\" as const\r\nconst DELETE_TASK = \"DELETE-TASK\" as const\r\nconst ADD_TASK = \"ADD-TASK\" as const\r\nconst CHANGE_TASK_TITLE = \"CHANGE-TASK-TITLE\" as const\r\n\r\nexport type TaskType = {\r\n    todolistId: string\r\n    taskId: string\r\n    title: string\r\n    status: boolean\r\n}\r\nexport type TasksType = {\r\n    [key: string]: TaskType[]\r\n}\r\ntype ActionsType =\r\n    ReturnType<typeof changeTaskStatusAC>\r\n    | ReturnType<typeof deleteTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof changeTaskTitleAC>\r\n    | ReturnType<typeof deleteTodolistAC>\r\n    | ReturnType<typeof addTodolistAC>\r\n\r\n\r\nexport const changeTaskStatusAC = (todolistId: string, taskId: string) => ({\r\n    type: CHANGE_TASK_STATUS,\r\n    todolistId,\r\n    taskId,\r\n})\r\nexport const deleteTaskAC = (todolistId: string, taskId: string) => ({\r\n    type: DELETE_TASK,\r\n    todolistId,\r\n    taskId,\r\n})\r\nexport const addTaskAC = (todolistId: string, newTaskTitle: string) => ({\r\n    type: ADD_TASK,\r\n    todolistId,\r\n    newTaskTitle,\r\n})\r\nexport const changeTaskTitleAC = (todolistId: string, taskId: string, newTaskTitle: string) => ({\r\n    type: CHANGE_TASK_TITLE,\r\n    todolistId,\r\n    taskId,\r\n    newTaskTitle,\r\n})\r\n\r\nconst initTasksState: TasksType = {\r\n    // [TODOLIST_ID1]: [\r\n    //     {todolistId: TODOLIST_ID1, taskId: v1(), title: \"11\", status: false},\r\n    //     {todolistId: TODOLIST_ID1, taskId: v1(), title: \"12\", status: false},\r\n    //     {todolistId: TODOLIST_ID1, taskId: v1(), title: \"13\", status: false},\r\n    // ],\r\n    // [TODOLIST_ID2]:\r\n    //     [\r\n    //         {todolistId: TODOLIST_ID2, taskId: v1(), title: \"21\", status: false},\r\n    //         {todolistId: TODOLIST_ID2, taskId: v1(), title: \"22\", status: false},\r\n    //         {todolistId: TODOLIST_ID2, taskId: v1(), title: \"23\", status: false},\r\n    //     ],\r\n}\r\n\r\nexport const taskReducer = (state = initTasksState, action: ActionsType): TasksType => {\r\n    switch (action.type) {\r\n        case CHANGE_TASK_STATUS:\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(task => task.taskId === action.taskId ?\r\n                    {...task, status: !task.status} : task)\r\n            }\r\n        case DELETE_TASK:\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].filter(\r\n                    task => task.taskId !== action.taskId)\r\n            }\r\n\r\n        case ADD_TASK:\r\n            const newTask: TaskType = {\r\n                todolistId: action.todolistId,\r\n                taskId: v1(),\r\n                title: action.newTaskTitle,\r\n                status: false,\r\n            }\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: [newTask, ...state[action.todolistId]]\r\n            }\r\n        case CHANGE_TASK_TITLE: {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(task => task.taskId === action.taskId ?\r\n                    {...task, title: action.newTaskTitle} : task)\r\n            }\r\n        }\r\n        case DELETE_TODOLIST:\r\n            const copyState = {...state}\r\n            delete copyState[action.todolistId]\r\n            return copyState\r\n        case ADD_TODOLIST:\r\n            return {[action.todolistId]: [], ...state}\r\n        default:\r\n            return state\r\n    }\r\n}","import React from \"react\";\r\nimport styles from \"./Task.module.css\"\r\nimport {TaskType} from \"../../redux/reducers/task-reducer\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    setNewTaskTitle: (taskId: string, itemTitle: string) => void\r\n    changeTaskStatus: (taskId: string) => void\r\n    deleteTask: (taskId: string) => void\r\n}\r\nexport const Task: React.FC<TaskPropsType> = React.memo(\r\n    ({task, setNewTaskTitle, deleteTask, changeTaskStatus}) => {\r\n\r\n        // const setNewTaskTitleHandler = (itemTitle: string) => {\r\n        //     setNewTaskTitle(task.taskId, itemTitle)\r\n        // }\r\n        const changeTaskStatusHandler = () => changeTaskStatus(task.taskId)\r\n        const deleteTaskHandler = () => deleteTask(task.taskId)\r\n\r\n        return (\r\n\r\n            <li className={styles.task_list} key={task.taskId}>\r\n                <input type=\"checkbox\" checked={task.status} onChange={changeTaskStatusHandler}\r\n                />\r\n                <label onClick={changeTaskStatusHandler}>{task.title}\r\n                    <span className={styles.task_strike}></span>\r\n                </label>\r\n                {/*<EditableSpan title={task.title} setNewItemHandler={setNewTaskTitleHandler}/>*/}\r\n                <button\r\n                    className={styles.task_item_remove}\r\n                    onClick={deleteTaskHandler}>\r\n                    <svg viewBox=\"0 0 40 40\">\r\n                        <path d=\"M15 15 L25 25 M25 15 L15 25\"/>\r\n                    </svg>\r\n                </button>\r\n            </li>\r\n        )\r\n    }\r\n)","import React, {ChangeEvent, useState} from \"react\";\r\nimport styles from \"./EditableSpan.module.css\"\r\n\r\ntype PropsType = {\r\n    title: string\r\n    setNewItemHandler: (itemTitle: string) => void\r\n}\r\n\r\nexport const EditableSpan: React.FC<PropsType> = ({title, setNewItemHandler}) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [itemTitle, setItemTitle] = useState<string>(title)\r\n\r\n    const onChangeInputHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setItemTitle(event.currentTarget.value)\r\n    }\r\n\r\n    const onBlurInputHandler = () => {\r\n        setEditMode(false)\r\n        setNewItemHandler(itemTitle)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {editMode ? <input className={styles.input_todolist} type=\"text\" value={itemTitle} onChange={onChangeInputHandler}\r\n                               onBlur={onBlurInputHandler} autoFocus={true}/> :\r\n                <span className={styles.todolist_title} onDoubleClick={() => setEditMode(true)}>{itemTitle}</span>}\r\n        </>\r\n    )\r\n}","import React, {useCallback} from \"react\";\r\nimport style from \"./Todolist.module.css\";\r\nimport {AddItemForm} from \"../../Components/AddItemForm\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../redux/store\";\r\nimport {\r\n    addTaskAC,\r\n    changeTaskStatusAC,\r\n    changeTaskTitleAC,\r\n    deleteTaskAC,\r\n    TaskType\r\n} from \"../../redux/reducers/task-reducer\";\r\nimport {\r\n    changeFilterValueAC,\r\n    changeTodolistTitleAC,\r\n    deleteTodolistAC,\r\n    FilterValueType,\r\n    TodolistType\r\n} from \"../../redux/reducers/todolist-reducer\";\r\nimport {Task} from \"../Tasks/Task\";\r\nimport {EditableSpan} from \"../../Components/EditableSpan\";\r\nimport {IconButton, Tooltip} from \"@mui/material\";\r\nimport DeleteIcon from \"@mui/icons-material/DeleteTwoTone\";\r\n\r\ntype TodolistPropsType = {\r\n    todolist: TodolistType\r\n}\r\n\r\nexport const Todolist: React.FC<TodolistPropsType> = React.memo(({todolist}) => {\r\n\r\n        let tasks = useSelector<AppRootStateType, TaskType[]>(state => state.tasks[todolist.id])\r\n        const dispatch = useDispatch()\r\n\r\n        const addNewTask = useCallback((inputValue: string) => {\r\n            dispatch(addTaskAC(todolist.id, inputValue))\r\n        }, [dispatch, todolist.id])\r\n        const changeTodolistFilter = useCallback((newFilterValue: FilterValueType) => {\r\n            dispatch(changeFilterValueAC(todolist.id, newFilterValue))\r\n        }, [dispatch, todolist.id])\r\n        const deleteTodolist = useCallback(() => {\r\n            dispatch(deleteTodolistAC(todolist.id))\r\n        }, [dispatch, todolist.id])\r\n        const changeTodolistTitle = useCallback((newTodolistTitle: string) => {\r\n            dispatch(changeTodolistTitleAC(todolist.id, newTodolistTitle))\r\n        }, [dispatch, todolist.id])\r\n        const setNewTaskTitle = useCallback((taskId: string, itemTitle: string) => {\r\n            dispatch(changeTaskTitleAC(todolist.id, taskId, itemTitle))\r\n        }, [dispatch, todolist.id])\r\n        const changeTaskStatus = useCallback(\r\n            (taskId: string) => dispatch(changeTaskStatusAC(todolist.id, taskId)),\r\n            [dispatch, todolist.id])\r\n        const deleteTask = useCallback((taskId: string) => dispatch(deleteTaskAC(todolist.id, taskId)),\r\n            [dispatch, todolist.id])\r\n\r\n        const filtrationTasks = () => {\r\n            let tasksAfterFilter;\r\n            switch (todolist.filter) {\r\n                case \"active\":\r\n                    tasksAfterFilter = tasks.filter(el => el.status === false)\r\n                    break\r\n                case \"completed\":\r\n                    tasksAfterFilter = tasks.filter(el => el.status === true)\r\n                    break\r\n                default:\r\n                    tasksAfterFilter = tasks\r\n            }\r\n            return tasksAfterFilter.map(task => <Task key={task.taskId}\r\n                                                      task={task}\r\n                                                      setNewTaskTitle={setNewTaskTitle}\r\n                                                      changeTaskStatus={changeTaskStatus}\r\n                                                      deleteTask={deleteTask}/>);\r\n        }\r\n\r\n        return (\r\n            <div className={style.todolist}>\r\n                <h3 style={{textAlign: \"center\"}}>\r\n                    <EditableSpan title={todolist.title} setNewItemHandler={changeTodolistTitle}/>\r\n                    <Tooltip title=\"Delete\">\r\n                        <IconButton aria-label=\"delete\" size=\"small\">\r\n                            <DeleteIcon onClick={deleteTodolist}\r\n                                        fontSize=\"small\"/>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                </h3>\r\n                <AddItemForm addItemHandler={addNewTask} type={\"task\"}/>\r\n                <div className={style.task_controls}>\r\n                    <button className={todolist.filter === \"all\" ? style.btn_active : \"\"}\r\n                            onClick={() => changeTodolistFilter(\"all\")}>All\r\n                    </button>\r\n                    <button className={todolist.filter === \"active\" ? style.btn_active : \"\"}\r\n                            onClick={() => changeTodolistFilter(\"active\")}>Active\r\n                    </button>\r\n                    <button className={todolist.filter === \"completed\" ? style.btn_active : \"\"}\r\n                            onClick={() => changeTodolistFilter(\"completed\")}>Completed\r\n                    </button>\r\n                </div>\r\n                <ul className={style.task_list}>\r\n                    {filtrationTasks()}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n)\r\n\r\n","import React from \"react\";\r\nimport {Todolist} from \"./Todolist\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../redux/store\";\r\nimport {TodolistType} from \"../../redux/reducers/todolist-reducer\";\r\nimport {Grid} from \"@mui/material\";\r\n\r\n\r\nexport const TodolistsList = React.memo(() => {\r\n        const todolists = useSelector<AppRootStateType, TodolistType[]>(state => state.todolists)\r\n\r\n        return (\r\n            <Grid container spacing={3} style={{justifyContent: \"center\"}}>\r\n                {todolists.map(\r\n                    tdl => <Grid item maxWidth={\"400px\"} key={tdl.id}><Todolist todolist={tdl}/>\r\n                    </Grid>\r\n                )}\r\n            </Grid>\r\n        )\r\n    }\r\n)","import {AddItemForm} from \"./AddItemForm\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {addTodolistAC} from \"../redux/reducers/todolist-reducer\";\r\nimport React, {useCallback} from \"react\";\r\nimport {v1} from \"uuid\";\r\nimport style from \"./AddTodolistPage.module.css\"\r\n\r\nexport const AddTodolistPage = React.memo(() => {\r\n\r\n        const dispatch = useDispatch()\r\n        const addTodolist = useCallback((todolistTitle: string) => {\r\n            dispatch(addTodolistAC(v1(), todolistTitle))\r\n        }, [dispatch])\r\n\r\n        return (\r\n            <div className={style.add_todolist_block}>\r\n                <div>\r\n                    <AddItemForm addItemHandler={addTodolist} type={\"todolist\"}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n)","import style from \"./HeaderNavlinkButtons.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React, {useState} from \"react\";\r\n\r\nexport const HeaderNavlinkButtons = React.memo(() => {\r\n\r\n        const [activePage, setActivePage] = useState<string>(\"add\")\r\n\r\n        return (\r\n            <div className={style.page_controls}>\r\n                <NavLink to=\"/add\">\r\n                    <button\r\n                        onClick={() => setActivePage(\"add\")}\r\n                        className={activePage === \"add\" ? style.btn_active : \"\"}>\r\n                        Add todolist\r\n                    </button>\r\n                </NavLink>\r\n                <NavLink to=\"/todolists\">\r\n                    <button onClick={() => setActivePage(\"todolists\")}\r\n                            className={activePage === \"todolists\" ? style.btn_active : \"\"}>\r\n                        Todolists page\r\n                    </button>\r\n                </NavLink>\r\n            </div>\r\n        )\r\n    }\r\n)","import React from \"react\";\r\nimport {TodolistsList} from \"../features/Todolists/TodolistsList\";\r\nimport {BrowserRouter, Route, Routes} from \"react-router-dom\";\r\nimport {AddTodolistPage} from \"../Components/AddTodolistPage\";\r\nimport {HeaderNavlinkButtons} from \"../Components/headerNavlinkButtons/HeaderNavlinkButtons\";\r\n\r\nfunction App() {\r\n\r\n    return (\r\n        <BrowserRouter>\r\n            <HeaderNavlinkButtons/>\r\n            <Routes>\r\n                <Route path=\"/add\" element={<AddTodolistPage/>}/>\r\n                <Route path=\"/todolists\" element={<TodolistsList/>}/>\r\n            </Routes>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers, createStore} from \"redux\";\r\nimport {todolistReducer} from \"./reducers/todolist-reducer\";\r\nimport {taskReducer} from \"./reducers/task-reducer\";\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport const rootReducer = combineReducers({\r\n    todolists: todolistReducer,\r\n    tasks: taskReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer)","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./app/App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./redux/store\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}